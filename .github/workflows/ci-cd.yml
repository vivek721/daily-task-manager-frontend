name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  # Quality checks and testing
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18', '20', '22']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run typecheck

      - name: Lint code
        run: npm run lint || echo "Linting failed, but continuing deployment"

      - name: Run tests
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            npm run test
          else
            echo "No tests found, skipping test step"
          fi

  # Build and deployment
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: quality
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          CI: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 30

      # Deploy to Vercel (recommended for React apps)
      - name: Deploy to Vercel
        if: github.ref == 'refs/heads/main'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./

  # Security and dependency checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for outdated dependencies
        run: npm outdated || true

  # Performance and bundle analysis
  analyze:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for analysis
        run: npm run build

      - name: Analyze bundle size
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            function getDirectorySize(dirPath) {
              let totalSize = 0;
              const files = fs.readdirSync(dirPath);
              
              files.forEach(file => {
                const filePath = path.join(dirPath, file);
                const stats = fs.statSync(filePath);
                
                if (stats.isDirectory()) {
                  totalSize += getDirectorySize(filePath);
                } else {
                  totalSize += stats.size;
                }
              });
              
              return totalSize;
            }
            
            try {
              const distSize = getDirectorySize('./dist');
              const sizeInMB = (distSize / (1024 * 1024)).toFixed(2);
              
              console.log(`Bundle size: ${sizeInMB} MB`);
              
              // Create a comment on PR if this is a pull request
              if (context.eventName === 'pull_request') {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `ðŸ“¦ **Bundle Analysis**\n\nTotal bundle size: **${sizeInMB} MB**`
                });
              }
            } catch (error) {
              console.log('Could not analyze bundle size:', error.message);
            }